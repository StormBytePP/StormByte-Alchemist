# Decoder/Encoder support
option(ENABLE_DAV1D	 		"Enable DAV1D AV1 decoder"					ON)
option(ENABLE_LIBAOM 		"Enable AV1 libAOM"							ON)
option(ENABLE_CUDA 			"Enable CUDA decoding" 						ON)
option(ENABLE_OPENH264 		"Enable OpenH264" 							ON)
option(ENABLE_LIBVPX 		"Enable LibVPX" 							ON)
option(ENABLE_FDK 			"Enable FDK" 								ON)
option(ENABLE_LIBOPUS 		"Enable LibOpus" 							ON)
option(ENABLE_LIBVORBIS 	"Enable LibVorbis" 							ON)
option(ENABLE_RAV1E 		"Enable RAV1E" 								ON)
option(ENABLE_SVT_AV1 		"Enable SVT AV1" 							ON)
option(ENABLE_NVENC 		"Enable NVEnc" 								ON)
option(ENABLE_X264 			"Enable x264" 								ON)
option(ENABLE_X265 			"Enable x265" 								ON)
option(ENABLE_XVID 			"Enable XVID" 								ON)
option(ENABLE_TWOLAME 		"Enable TwoLame MP2 encoder" 				ON)
option(ENABLE_LAME 			"Enable Lame MP3 encoder" 					ON)
# Image support
option(ENABLE_WEBP 			"Enable WebP" 								ON)
option(ENABLE_IMAGE_PROCESS	"Enable image processing (experimental)"	OFF)

# Decoder/Encoder configuration
if (ENABLE_DAV1D)
	message(STATUS "Enabled DAV1D AV1 decoder")
	target_compile_definitions(Alchemy PRIVATE ENABLE_DAV1D)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/video/av1_dav1d.cxx)
else()
	message(STATUS "Disabled DAV1D AV1 decoder")
endif()
if (ENABLE_LIBAOM)
	message(STATUS "Enabled AV1 libAOM")
	target_compile_definitions(Alchemy PRIVATE ENABLE_LIBAOM)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/video/av1_libaom.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/av1_libaom.cxx)
else()
	message(STATUS "Disabled AV1 libAOM")
endif()
if (ENABLE_CUDA)
	message(STATUS "Enabled CUDA decoding")
	target_compile_definitions(Alchemy PRIVATE ENABLE_CUDA)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/video/av1_cuvid.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/video/h264_cuvid.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/video/h265_cuvid.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/video/mpeg2_cuvid.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/video/mpeg4_cuvid.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/video/vp8_cuvid.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/video/vp9_cuvid.cxx)
else()
	message(STATUS "Disabled CUDA decoding")
endif()
if (ENABLE_OPENH264)
	message(STATUS "Enabled OpenH264")
	target_compile_definitions(Alchemy PRIVATE ENABLE_OPENH264)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/video/h264_openh264.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/h264_openh264.cxx)
else()
	message(STATUS "Disabled OpenH264")
endif()
if (ENABLE_LIBVPX)
	message(STATUS "Enabled LibVPX")
	target_compile_definitions(Alchemy PRIVATE ENABLE_LIBVPX)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/video/vp8_libvpx.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/video/vp9_libvpx.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/vp8_libvpx.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/vp9_libvpx.cxx)
else()
	message(STATUS "Disabled LibVPX")
endif()
if (ENABLE_FDK)
	message(STATUS "Enabled Fraunhoffer AAC")
	target_compile_definitions(Alchemy PRIVATE ENABLE_FDK)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/audio/aac_fraunhoffer.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/audio/aac_fraunhoffer.cxx)
else()
	message(STATUS "Disabled Fraunhoffer AAC")
endif()
if (ENABLE_LIBOPUS)
	message(STATUS "Enabled LibOpus")
	target_compile_definitions(Alchemy PRIVATE ENABLE_LIBOPUS)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/audio/opus_libopus.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/audio/opus_libopus.cxx)
else()
	message(STATUS "Disabled LibOpus")
endif()
if (ENABLE_LIBVORBIS)
	message(STATUS "Enabled LibVorbis")
	target_compile_definitions(Alchemy PRIVATE ENABLE_LIBVORBIS)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/decoder/audio/vorbis_libvorbis.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/audio/vorbis_libvorbis.cxx)
else()
	message(STATUS "Disabled LibVorbis")
endif()
if (ENABLE_RAV1E)
	message(STATUS "Enabled RAV1E")
	target_compile_definitions(Alchemy PRIVATE ENABLE_RAV1E)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/av1_rav1e.cxx)
else()
	message(STATUS "Disabled RAV1E")
endif()
if (ENABLE_SVT_AV1)
	message(STATUS "Enabled SVT AV1")
	target_compile_definitions(Alchemy PRIVATE ENABLE_SVT_AV1)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/av1_svt.cxx)
else()
	message(STATUS "Disabled SVT AV1")
endif()
if (ENABLE_NVENC)
	message(STATUS "Enabled NVEnc")
	target_compile_definitions(Alchemy PRIVATE ENABLE_NVENC)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/av1_nvenc.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/h264_nvenc.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/h265_nvenc.cxx)
else()
	message(STATUS "Disabled NVEnc")
endif()
if (ENABLE_X264)
	message(STATUS "Enabled x264")
	target_compile_definitions(Alchemy PRIVATE ENABLE_X264)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/h264_x264.cxx)
else()
	message(STATUS "Disabled x264")
endif()
if (ENABLE_X265)
	message(STATUS "Enabled x265")
	target_compile_definitions(Alchemy PRIVATE ENABLE_X265)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/h265_x265.cxx)
else()
	message(STATUS "Disabled x265")
endif()
if (ENABLE_XVID)
	message(STATUS "Enabled XVID")
	target_compile_definitions(Alchemy PRIVATE ENABLE_XVID)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/mpeg4_libxvid.cxx)
else()
	message(STATUS "Disabled XVID")
endif()
if (ENABLE_TWOLAME)
	message(STATUS "Enabled TwoLame MP2 encoder")
	target_compile_definitions(Alchemy PRIVATE ENABLE_TWOLAME)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/audio/mp2_twolame.cxx)
else()
	message(STATUS "Disabled TwoLame MP2 encoder")
endif()
if (ENABLE_LAME)
	message(STATUS "Enabled Lame MP3 encoder")
	target_compile_definitions(Alchemy PRIVATE ENABLE_LAME)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/audio/mp3_lame.cxx)
else()
	message(STATUS "Disabled Lame MP3 encoder")
endif()
if (ENABLE_IMAGE_PROCESS)
	message(STATUS "Enabled Image Processing")
	target_compile_definitions(Alchemy PRIVATE ENABLE_IMAGE_PROCESS)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/image.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/image/bmp_default.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/image/gif_default.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/image/jpg_default.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/image/png_default.cxx)
	target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/image/tiff_default.cxx)
	
	if (ENABLE_WEBP)
		message(STATUS "Enabled WebP")
		target_compile_definitions(Alchemy PRIVATE ENABLE_WEBP)
		target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/image/webp_libwebp.cxx)
	else()
		message(STATUS "Disabled WebP")
	endif()
else()
	message(STATUS "Disabled Image Processing")
endif()