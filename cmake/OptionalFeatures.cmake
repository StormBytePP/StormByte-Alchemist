# Decoder/Encoder support
option(ENABLE_DAV1D	 		"Enable DAV1D AV1 decoder"					ON)
option(ENABLE_LIBAOM 		"Enable AV1 libAOM"							ON)
option(ENABLE_CUDA 			"Enable CUDA decoding" 						ON)
option(ENABLE_OPENH264 		"Enable OpenH264" 							ON)
option(ENABLE_LIBVPX 		"Enable LibVPX" 							ON)
option(ENABLE_FDK 			"Enable FDK" 								ON)
option(ENABLE_LIBOPUS 		"Enable LibOpus" 							ON)
option(ENABLE_LIBVORBIS 	"Enable LibVorbis" 							ON)
option(ENABLE_RAV1E 		"Enable RAV1E" 								ON)
option(ENABLE_SVT_AV1 		"Enable SVT AV1" 							ON)
option(ENABLE_NVENC 		"Enable NVEnc" 								ON)
option(ENABLE_X264 			"Enable x264" 								ON)
option(ENABLE_X265 			"Enable x265" 								ON)
option(ENABLE_XVID 			"Enable XVID" 								ON)
option(ENABLE_TWOLAME 		"Enable TwoLame MP2 encoder" 				ON)
option(ENABLE_LAME 			"Enable Lame MP3 encoder" 					ON)
# Image support
option(ENABLE_WEBP 			"Enable WebP" 								ON)
option(ENABLE_IMAGE_PROCESS	"Enable image processing (experimental)"	OFF)

# Decoder/Encoder configuration
if (ENABLE_X264)
	message(STATUS "Enabled x264")
	target_compile_definitions(Alchemy PRIVATE ENABLE_X264)
	#target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/h264_x264.cxx)
else()
	message(STATUS "Disabled x264")
endif()
if (ENABLE_X265)
	message(STATUS "Enabled x265")
	target_compile_definitions(Alchemy PRIVATE ENABLE_X265)
	#target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/h265_x265.cxx)
else()
	message(STATUS "Disabled x265")
endif()
if (ENABLE_XVID)
	message(STATUS "Enabled XVID")
	target_compile_definitions(Alchemy PRIVATE ENABLE_XVID)
	#target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/video/mpeg4_libxvid.cxx)
else()
	message(STATUS "Disabled XVID")
endif()
if (ENABLE_TWOLAME)
	message(STATUS "Enabled TwoLame MP2 encoder")
	target_compile_definitions(Alchemy PRIVATE ENABLE_TWOLAME)
	#target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/audio/mp2_twolame.cxx)
else()
	message(STATUS "Disabled TwoLame MP2 encoder")
endif()
if (ENABLE_LAME)
	message(STATUS "Enabled Lame MP3 encoder")
	target_compile_definitions(Alchemy PRIVATE ENABLE_LAME)
	#target_sources(Alchemy PRIVATE ${ALCHEMY_DIR}/media/encoder/audio/mp3_lame.cxx)
else()
	message(STATUS "Disabled Lame MP3 encoder")
endif()
