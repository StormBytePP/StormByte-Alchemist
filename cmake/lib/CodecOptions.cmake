# Decoder/Encoder support
option(ENABLE_DAV1D	 		"Enable DAV1D AV1 decoder"		ON)
option(ENABLE_LIBAOM 		"Enable AV1 libAOM"				ON)
option(ENABLE_CUDA 			"Enable CUDA decoding" 			ON)
option(ENABLE_OPENH264 		"Enable OpenH264" 				ON)
option(ENABLE_LIBVPX 		"Enable LibVPX" 				ON)
option(ENABLE_FDK 			"Enable FDK" 					ON)
option(ENABLE_LIBOPUS 		"Enable LibOpus" 				ON)
option(ENABLE_LIBVORBIS 	"Enable LibVorbis" 				ON)
option(ENABLE_RAV1E 		"Enable RAV1E" 					ON)
option(ENABLE_SVT_AV1 		"Enable SVT AV1" 				ON)
option(ENABLE_NVENC 		"Enable NVEnc" 					ON)
option(ENABLE_X264 			"Enable x264" 					ON)
option(ENABLE_X265 			"Enable x265" 					ON)
option(ENABLE_XVID 			"Enable XVID" 					ON)
option(ENABLE_TWOLAME 		"Enable TwoLame MP2 encoder" 	ON)
option(ENABLE_LAME 			"Enable Lame MP3 encoder" 		ON)
option(ENABLE_WEBP 			"Enable WebP" 					ON)

# Decoder/Encoder configuration
if (ENABLE_DAV1D)
	message(STATUS "Enabled DAV1D AV1 decoder")
	target_compile_definitions(Alchemy PRIVATE ENABLE_DAV1D)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled DAV1D AV1 decoder")
endif()
if (ENABLE_LIBAOM)
	message(STATUS "Enabled AV1 libAOM")
	target_compile_definitions(Alchemy PRIVATE ENABLE_LIBAOM)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled AV1 libAOM")
endif()
if (ENABLE_CUDA)
	message(STATUS "Enabled CUDA decoding")
	target_compile_definitions(Alchemy PRIVATE ENABLE_CUDA)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled CUDA decoding")
endif()
if (ENABLE_OPENH264)
	message(STATUS "Enabled OpenH264")
	target_compile_definitions(Alchemy PRIVATE ENABLE_OPENH264)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled OpenH264")
endif()
if (ENABLE_LIBVPX)
	message(STATUS "Enabled LibVPX")
	target_compile_definitions(Alchemy PRIVATE ENABLE_LIBVPX)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled LibVPX")
endif()
if (ENABLE_LIBVORBIS)
	message(STATUS "Enabled LibVorbis")
	target_compile_definitions(Alchemy PRIVATE ENABLE_LIBVORBIS)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled LibVorbis")
endif()
if (ENABLE_RAV1E)
	message(STATUS "Enabled RAV1E")
	target_compile_definitions(Alchemy PRIVATE ENABLE_RAV1E)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled RAV1E")
endif()
if (ENABLE_SVT_AV1)
	message(STATUS "Enabled SVT AV1")
	target_compile_definitions(Alchemy PRIVATE ENABLE_SVT_AV1)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled SVT AV1")
endif()
if (ENABLE_NVENC)
	message(STATUS "Enabled NVEnc")
	target_compile_definitions(Alchemy PRIVATE ENABLE_NVENC)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled NVEnc")
endif()
if (ENABLE_X264)
	message(STATUS "Enabled x264")
	target_compile_definitions(Alchemy PRIVATE ENABLE_X264)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled x264")
endif()
if (ENABLE_X265)
	message(STATUS "Enabled x265")
	target_compile_definitions(Alchemy PRIVATE ENABLE_X265)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled x265")
endif()
if (ENABLE_XVID)
	message(STATUS "Enabled XVID")
	target_compile_definitions(Alchemy PRIVATE ENABLE_XVID)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled XVID")
endif()
if (ENABLE_TWOLAME)
	message(STATUS "Enabled TwoLame MP2 encoder")
	target_compile_definitions(Alchemy PRIVATE ENABLE_TWOLAME)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled TwoLame MP2 encoder")
endif()
if (ENABLE_LAME)
	message(STATUS "Enabled Lame MP3 encoder")
	target_compile_definitions(Alchemy PRIVATE ENABLE_LAME)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled Lame MP3 encoder")
endif()
if (ENABLE_WEBP)
	message(STATUS "Enabled WebP")
	target_compile_definitions(Alchemy PRIVATE ENABLE_WEBP)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.cxx)
	#list(APPEND ALCHEMY_EXTRA_SRCs ${ALCHEMY_DIR}/media/codec/video/av1.hxx)
else()
	message(STATUS "Disabled WebP")
endif()